/** 
 * Squelette de classe labyrinthe
 */

import java.io.*;
import java.io.IOException;


import java.io.IOException;


class Labyrinthe{

    static final char MUR = 'X';
    static final char PJ = 'P';
    static final char SORTIE = 'S';
    static final char VIDE = '.';

    static final String HAUT = "haut";
    static final String BAS = "bas";
    static final String GAUCHE = "gauche";
    static final String DROITE = "droite";

    private boolean[][] murs;
    private Personnage personnage;
    private Sortie sortie;
    char getChar(int x, int y) {
        char res;
        if (personnage.getX()==x && personnage.getY()==y){
            res= PJ;
        } else if (sortie.getX()==x && sortie.getY()==y) {
            res=SORTIE;
        } else if (murs[x][y]){
            res= MUR;
        } else{
            res=VIDE;
        }
        return res;
    }

    static int[] getSuivant(int x, int y, String action) throws ActionInconnueException {
        int[] suiv = null;
        if (action.equals(HAUT)) {
            suiv = new int[]{x - 1, y};
        } else if (action.equals(BAS)) {
            suiv = new int[]{x + 1, y};
        } else if (action.equals(GAUCHE)) {
            suiv = new int[]{x, y - 1};
        } else if (action.equals(DROITE)) {
            suiv = new int[]{x, y + 1};
        } else {
            throw new ActionInconnueException("Action inconnue : " + action);
        }
        return suiv;
    }

    void deplacerPerso(String action) throws ActionInconnueException {
        int[] suivant;
        try {
            suivant = getSuivant(personnage.getX(), personnage.getY(), action);
        } catch (ActionInconnueException e) {
            e.printStackTrace();
            return;
        }

        while (!murs[suivant[0]][suivant[1]]) {
            if (suivant[0] == sortie.getX() && suivant[1] == sortie.getY()) {
                personnage.setX(suivant[0]);
                personnage.setY(suivant[1]);
                return; // Sortie de la m√©thode
            }

            personnage.setX(suivant[0]);
            personnage.setY(suivant[1]);

            try {
                suivant = getSuivant(personnage.getX(), personnage.getY(), action);
            } catch (ActionInconnueException e) {
                e.printStackTrace();
                return;
            }
        }
    }



    public String toString() {
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < murs.length; i++) {
            for (int j = 0; j < murs[i].length; j++) {
                sb.append(getChar(i, j));
            }
            sb.append("\n");
        }

        return sb.toString();
    }



    public boolean etreFini() {
        if (personnage.getX() == sortie.getX() && personnage.getY() == sortie.getY()) {
            return true;
        } else {
            return false;
        }
    }



    public static Labyrinthe chargerLabyrinthe(String nom) throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(nom));
        String ligne;
        int numL = 0;
        int numC = 0;
        boolean[][] murs = null;
        Personnage personnage = null;
        Sortie sortie = null;


        while ((ligne = reader.readLine()) != null) {
            numL++;
            numC = ligne.length();
        }
        reader.close();


        reader = new BufferedReader(new FileReader(nom));


        murs = new boolean[numL][numC];


        for (int i = 0; (ligne = reader.readLine()) != null; i++) {
            for (int j = 0; j < numC; j++) {
                char symbol = ligne.charAt(j);
                if (symbol == MUR) {
                    murs[i][j] = true;
                } else if (symbol == PJ) {
                    personnage = new Personnage(i, j);
                } else if (symbol == SORTIE) {
                    sortie = new Sortie(i, j);
                }
            }
        }
        reader.close();


        Labyrinthe labyrinthe = new Labyrinthe();
        labyrinthe.murs = murs;
        labyrinthe.personnage = personnage;
        labyrinthe.sortie = sortie;
        return labyrinthe;
    }


}

/** 
 * Squelette de classe labyrinthe
 */



import java.io.*;
import java.io.IOException;


class Labyrinthe{

    static final char MUR = 'X';
    static final char PJ = 'P';
    static final char SORTIE = 'S';
    static final char VIDE = '.';

    static final String HAUT = "haut";
    static final String BAS = "bas";
    static final String GAUCHE = "gauche";
    static final String DROITE = "droite";

    private boolean[][] murs;
    private Personnage personnage;
    private Sortie sortie;

    /**
     * Methde qui d√©crit le contenu de la case
     * @param x
     * @param y
     * @return
     */
    char getChar(int x, int y) {
        char res;
        if (personnage.getX()==x && personnage.getY()==y){
            res= PJ;
        } else if (sortie.getX()==x && sortie.getY()==y) {
            res=SORTIE;
        } else if (murs[x][y]){
            res= MUR;
        } else{
            res=VIDE;
        }
        return res;
    }

    /**
     * Methode qui retourne les coordonnees de la case suivante
     * @param x
     * @param y
     * @param action
     * @return
     * @throws ActionInconnueException
     */
    static int[] getSuivant(int x, int y, String action) throws ActionInconnueException {
        int[] suiv = null;
        if (action.equals(HAUT)) {
            suiv = new int[]{x - 1, y};
        } else if (action.equals(BAS)) {
            suiv = new int[]{x + 1, y};
        } else if (action.equals(GAUCHE)) {
            suiv = new int[]{x, y - 1};
        } else if (action.equals(DROITE)) {
            suiv = new int[]{x, y + 1};
        } else {
            throw new ActionInconnueException("Action inconnue : " + action);
        }
        return suiv;
    }

    /**
     *Methode pour deplacer le perso
     * @param action
     * @throws ActionInconnueException
     */
    void deplacerPerso(String action) throws ActionInconnueException {
        int[] suivant;
        try {
            suivant = getSuivant(personnage.getX(), personnage.getY(), action);
        } catch (ActionInconnueException e) {
            e.printStackTrace();
            return;
        }

        while (murs[suivant[0]][suivant[1]]== false) {
            if (suivant[0] == sortie.getX() && suivant[1] == sortie.getY()) {
                personnage.setX(suivant[0]);
                personnage.setY(suivant[1]);
                return;
            }
            personnage.setX(suivant[0]);
            personnage.setY(suivant[1]);
            try {
                suivant = getSuivant(personnage.getX(), personnage.getY(), action);
            } catch (ActionInconnueException e) {
                e.printStackTrace();
                return;
            }
        }
    }

    /**
     * methode qui retourne l'etat du labyrinthe
     * @return s
     */
    public String toString() {
        String s = "";

        for (int i = 0; i < murs.length; i++) {
            for (int j = 0; j < murs[i].length; j++) {
                s += getChar(i, j);
            }
            s += "\n";
        }
        return s;
    }


    /**
     * methode qui permet d'arreter la jeu
     * @return res
     */
    public boolean etreFini() {
        boolean res;
        if (personnage.getX() == sortie.getX() && personnage.getY() == sortie.getY()) {
            res= true;
        } else {
            res = false;
        }
        return res;
    }

    /**
     * Methode qui permet de charger le labyrinthe
     * @param nom
     * @return laby
     * @throws IOException
     * @throws FichierIncorrectException
     */

    public static Labyrinthe chargerLabyrinthe(String nom) throws IOException, FichierIncorrectException {
        FileReader fr = new FileReader(nom);
        BufferedReader bf = new BufferedReader(fr);


        String numLs = bf.readLine();
        String numCs = bf.readLine();
        int numL = Integer.parseInt(numLs);
        int numC = Integer.parseInt(numCs);

        Labyrinthe laby = new Labyrinthe();
        laby.murs = new boolean[numL][numC];

        for (int i = 0; i < numL; i++) {
            String lActu = bf.readLine();
            if (lActu == null || lActu.length() != numC) {
                throw new FichierIncorrectException("nbColonnes ne correspond pas");
            }
            for (int j = 0; j < numC; j++) {
                char c = lActu.charAt(j);
                if (c== MUR) {
                    laby.murs[i][j] = true;
                } else if (c== PJ) {
                    if (laby.personnage != null) {
                        throw new FichierIncorrectException("plusieurs personnages");
                    }
                    laby.personnage= new Personnage(i, j);
                } else if (c== SORTIE) {
                    if (laby.sortie != null) {
                        throw new FichierIncorrectException("plusieurs sorties");
                    }
                    laby.sortie=new Sortie(i, j);
                } else if (c != VIDE) {
                    throw new FichierIncorrectException("caractere inconnu <" + c + ">");
                }
            }
        }

        if (laby.personnage==null) {
            throw new FichierIncorrectException("personnage inconnu");
        }

        if (laby.sortie==null) {
            throw new FichierIncorrectException("sortie inconnue");
        }

        bf.close();
        return laby;
    }

public boolean[][] getMurs() {
        return murs;
    }

    // Getter pour l'attribut personnage
    public Personnage getPersonnage() {
        return personnage;
    }

    // Getter pour l'attribut sortie
    public Sortie getSortie() {
        return sortie;
    }
}
